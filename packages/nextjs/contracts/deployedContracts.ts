/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    YourContract: {
      address: "0x700b6a60ce7eaaea56f065753d8dcb9653dbad35",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "receive",
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "greeting",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "premium",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "setGreeting",
          inputs: [
            {
              name: "_newGreeting",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "totalCounter",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "userGreetingCounter",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "withdraw",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "GreetingChange",
          inputs: [
            {
              name: "greetingSetter",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newGreeting",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "premium",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1740380961.json",
      deploymentScript: "Deploy.s.sol",
    },
    BaguaDukiDaoContract: {
      address: "0x8ce361602b935680e8dec218b820ff5056beb7af",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "receive",
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "UPGRADE_INTERFACE_VERSION",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "baguaDaoBpsArr",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256[8]",
              internalType: "uint256[8]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "baguaDaoFairDropArr",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple[8]",
              internalType: "struct ISharedStructs.DaoFairDrop[8]",
              components: [
                {
                  name: "unitAmount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "unitNumber",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "unitTotal",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "baguaDaoUnitCountArr",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256[8]",
              internalType: "uint256[8]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "buaguaDaoAgg4Me",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct ISharedStructs.BaguaDaoAgg",
              components: [
                {
                  name: "bornSeconds",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "totalClaimedAmount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "bpsArr",
                  type: "uint256[8]",
                  internalType: "uint256[8]",
                },
                {
                  name: "bpsNumArr",
                  type: "uint256[8]",
                  internalType: "uint256[8]",
                },
                {
                  name: "curFairDrops",
                  type: "tuple[8]",
                  internalType: "struct ISharedStructs.DaoFairDrop[8]",
                  components: [
                    {
                      name: "unitAmount",
                      type: "uint256",
                      internalType: "uint256",
                    },
                    {
                      name: "unitNumber",
                      type: "uint256",
                      internalType: "uint256",
                    },
                    {
                      name: "unitTotal",
                      type: "uint256",
                      internalType: "uint256",
                    },
                  ],
                },
                {
                  name: "luckyCommunityParticipants",
                  type: "uint256[3]",
                  internalType: "uint256[3]",
                },
                {
                  name: "userClaimedRoundArr",
                  type: "uint256[8]",
                  internalType: "uint256[8]",
                },
                {
                  name: "userParticipantNo",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "claim1Love_WorldDukiInActionFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim2Love_NationDukiInActionFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim3Love_CommunityLotteryFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim4Love_BuilderFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim5Love_ContributorFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim6Love_InvestorFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim7Love_MaintainerFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim8Love_FounderFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "evolveDaoAndDivideLove",
          inputs: [
            {
              name: "communityLuckyReminderNumber",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "initialize",
          inputs: [
            {
              name: "config",
              type: "tuple",
              internalType: "struct ISharedStructs.NetworkConfig",
              components: [
                {
                  name: "stableCoin",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "maintainers",
                  type: "address[]",
                  internalType: "address[]",
                },
                {
                  name: "creators",
                  type: "address[]",
                  internalType: "address[]",
                },
              ],
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "payLoveIntoDao",
          inputs: [
            {
              name: "willMessage",
              type: "string",
              internalType: "string",
            },
            {
              name: "willSignature",
              type: "string",
              internalType: "string",
            },
            {
              name: "willDivinationResult",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "loveAsMoneyAmount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "payToInvest",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "proxiableUUID",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "s_dao_bornSeconds",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "s_dao_evolve_step",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "s_dao_evovle_block_num",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "stableCoinAddress",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalStableCoin",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upgradeToAndCall",
          inputs: [
            {
              name: "newImplementation",
              type: "address",
              internalType: "address",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "event",
          name: "BaguaDukiDaoBpsChanged",
          inputs: [
            {
              name: "oldBpsArr",
              type: "uint256[8]",
              indexed: false,
              internalType: "uint256[8]",
            },
            {
              name: "newBpsArr",
              type: "uint256[8]",
              indexed: false,
              internalType: "uint256[8]",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ConfigChanged",
          inputs: [
            {
              name: "changeType",
              type: "uint8",
              indexed: false,
              internalType: "enum ISharedStructs.ConfigChangeType",
            },
            {
              name: "previousFee",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "newFee",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "DukiDaoEvolution",
          inputs: [
            {
              name: "daoEvolveNum",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "luckyParticantsNumber",
              type: "uint256[3]",
              indexed: false,
              internalType: "uint256[3]",
            },
            {
              name: "fairDrops",
              type: "tuple[8]",
              indexed: false,
              internalType: "struct ISharedStructs.DaoFairDrop[8]",
              components: [
                {
                  name: "unitAmount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "unitNumber",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "unitTotal",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "DukiInActionEvent",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: false,
              internalType: "address",
            },
            {
              name: "interactType",
              type: "uint8",
              indexed: false,
              internalType: "enum ISharedStructs.InteractType",
            },
            {
              name: "daoEvolveNum",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "unitNumber",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Initialized",
          inputs: [
            {
              name: "version",
              type: "uint64",
              indexed: false,
              internalType: "uint64",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Upgraded",
          inputs: [
            {
              name: "implementation",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "AddressEmptyCode",
          inputs: [
            {
              name: "target",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "AlreadyInvested",
          inputs: [],
        },
        {
          type: "error",
          name: "BpsSumError",
          inputs: [],
        },
        {
          type: "error",
          name: "BpsTooLargeViolationError",
          inputs: [],
        },
        {
          type: "error",
          name: "BpsTooSmallViolationError",
          inputs: [],
        },
        {
          type: "error",
          name: "ClaimDoNotHaveRole",
          inputs: [
            {
              name: "t",
              type: "uint8",
              internalType: "enum IBaguaDukiDao.Trigram",
            },
          ],
        },
        {
          type: "error",
          name: "ClaimedCurrentRoundAlreadyError",
          inputs: [],
        },
        {
          type: "error",
          name: "DuplicateFounderError",
          inputs: [],
        },
        {
          type: "error",
          name: "ERC1967InvalidImplementation",
          inputs: [
            {
              name: "implementation",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC1967NonPayable",
          inputs: [],
        },
        {
          type: "error",
          name: "FailedCall",
          inputs: [],
        },
        {
          type: "error",
          name: "InsufficientAllowance",
          inputs: [
            {
              name: "t",
              type: "uint8",
              internalType: "enum ISharedStructs.InteractType",
            },
            {
              name: "src",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InsufficientDistributionAmount",
          inputs: [
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidInitialization",
          inputs: [],
        },
        {
          type: "error",
          name: "InvalidSignature",
          inputs: [],
        },
        {
          type: "error",
          name: "InvalidTrigramIndexError",
          inputs: [],
        },
        {
          type: "error",
          name: "InvertorsFullExceed369",
          inputs: [],
        },
        {
          type: "error",
          name: "InvestorsFull",
          inputs: [],
        },
        {
          type: "error",
          name: "JoinedAfterCurrentDaoDistribution",
          inputs: [],
        },
        {
          type: "error",
          name: "LateForCurrentClaim",
          inputs: [
            {
              name: "currentClaimRound",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "lateEntryRound",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "LoveAsMoneyIntoDaoRequired",
          inputs: [],
        },
        {
          type: "error",
          name: "NoDistributionUnitLeft",
          inputs: [],
        },
        {
          type: "error",
          name: "NoFoundersError",
          inputs: [],
        },
        {
          type: "error",
          name: "NotCommunityLotteryWinner",
          inputs: [],
        },
        {
          type: "error",
          name: "NotCommunityParticipant",
          inputs: [],
        },
        {
          type: "error",
          name: "NotHasRole",
          inputs: [],
        },
        {
          type: "error",
          name: "NotInitializing",
          inputs: [],
        },
        {
          type: "error",
          name: "NotOwnerError",
          inputs: [],
        },
        {
          type: "error",
          name: "NotQualifiedForClaim",
          inputs: [
            {
              name: "t",
              type: "uint8",
              internalType: "enum ISharedStructs.InteractType",
            },
          ],
        },
        {
          type: "error",
          name: "NotSupported",
          inputs: [
            {
              name: "actionNeeded",
              type: "string",
              internalType: "string",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "TransferFailed",
          inputs: [
            {
              name: "t",
              type: "uint8",
              internalType: "enum IBaguaDukiDao.CoinFlowType",
            },
            {
              name: "other",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "UUPSUnauthorizedCallContext",
          inputs: [],
        },
        {
          type: "error",
          name: "UUPSUnsupportedProxiableUUID",
          inputs: [
            {
              name: "slot",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
        },
        {
          type: "error",
          name: "ZeroAddressError",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1740401696.json",
      deploymentScript: "Deploy.s.sol",
    },
    ERC1967Proxy: {
      address: "0xe1aa25618fa0c7a1cfdab5d6b456af611873b629",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "implementation",
              type: "address",
              internalType: "address",
            },
            {
              name: "_data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          stateMutability: "payable",
        },
        {
          type: "fallback",
          stateMutability: "payable",
        },
        {
          type: "event",
          name: "Upgraded",
          inputs: [
            {
              name: "implementation",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "AddressEmptyCode",
          inputs: [
            {
              name: "target",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC1967InvalidImplementation",
          inputs: [
            {
              name: "implementation",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC1967NonPayable",
          inputs: [],
        },
        {
          type: "error",
          name: "FailedCall",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1740401696.json",
      deploymentScript: "Deploy.s.sol",
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
