/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    BaguaDukiDaoContract: {
      address: "0x90bb87c6258ad0d309d2f3a263d3bc7b0b9f522d",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "config",
              type: "tuple",
              internalType: "struct ISharedStructs.NetworkConfig",
              components: [
                {
                  name: "stableCoin",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "maintainers",
                  type: "address[]",
                  internalType: "address[]",
                },
                {
                  name: "creators",
                  type: "address[]",
                  internalType: "address[]",
                },
              ],
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "receive",
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "baguaDaoBpsArr",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256[8]",
              internalType: "uint256[8]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "baguaDaoFairDropArr",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple[8]",
              internalType: "struct ISharedStructs.DaoFairDrop[8]",
              components: [
                {
                  name: "unitAmount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "unitNumber",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "baguaDaoUnitCountArr",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256[8]",
              internalType: "uint256[8]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "buaguaDaoAgg4Me",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct ISharedStructs.BaguaDaoAgg",
              components: [
                {
                  name: "bornSeconds",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "totalClaimedAmount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "bpsArr",
                  type: "uint256[8]",
                  internalType: "uint256[8]",
                },
                {
                  name: "bpsNumArr",
                  type: "uint256[8]",
                  internalType: "uint256[8]",
                },
                {
                  name: "fairDrops",
                  type: "tuple[8]",
                  internalType: "struct ISharedStructs.DaoFairDrop[8]",
                  components: [
                    {
                      name: "unitAmount",
                      type: "uint256",
                      internalType: "uint256",
                    },
                    {
                      name: "unitNumber",
                      type: "uint256",
                      internalType: "uint256",
                    },
                  ],
                },
                {
                  name: "communityLuckyNumber",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "userClaimedRoundArr",
                  type: "uint256[8]",
                  internalType: "uint256[8]",
                },
                {
                  name: "participation",
                  type: "tuple",
                  internalType: "struct ISharedStructs.CommunityParticipation",
                  components: [
                    {
                      name: "participantNo",
                      type: "uint256",
                      internalType: "uint256",
                    },
                    {
                      name: "participantAmount",
                      type: "uint256",
                      internalType: "uint256",
                    },
                    {
                      name: "luckyClaimedRound",
                      type: "uint256",
                      internalType: "uint256",
                    },
                  ],
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "claim0Love_FounderFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim1Love_MaintainerFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim2Love_InvestorFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim3Love_ContributorFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim4Love_BuilderFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim5Love_CommunityLotteryFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim6Love_NationDukiInActionFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "claim7Love_WorldDukiInActionFairDrop",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "evolveDaoAndDivideLove",
          inputs: [
            {
              name: "communityLuckyNumber",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "initialize",
          inputs: [
            {
              name: "config",
              type: "tuple",
              internalType: "struct ISharedStructs.NetworkConfig",
              components: [
                {
                  name: "stableCoin",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "maintainers",
                  type: "address[]",
                  internalType: "address[]",
                },
                {
                  name: "creators",
                  type: "address[]",
                  internalType: "address[]",
                },
              ],
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "payLoveIntoDao",
          inputs: [
            {
              name: "willMessage",
              type: "string",
              internalType: "string",
            },
            {
              name: "willSignature",
              type: "string",
              internalType: "string",
            },
            {
              name: "willDivinationResult",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "loveAsMoneyAmount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "payToInvest",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "s_dao_born_seconds",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "s_dao_evolve_round",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "stableCoinAddress",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalStableCoin",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "BaguaDukiDaoBpsChanged",
          inputs: [
            {
              name: "oldBpsArr",
              type: "uint256[8]",
              indexed: false,
              internalType: "uint256[8]",
            },
            {
              name: "newBpsArr",
              type: "uint256[8]",
              indexed: false,
              internalType: "uint256[8]",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ConfigChanged",
          inputs: [
            {
              name: "changeType",
              type: "uint8",
              indexed: false,
              internalType: "enum ISharedStructs.ConfigChangeType",
            },
            {
              name: "previousFee",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "newFee",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "DukiDaoEvolution",
          inputs: [
            {
              name: "daoEvolveRound",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "communityLuckyNumber",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "fairDrops",
              type: "tuple[8]",
              indexed: false,
              internalType: "struct ISharedStructs.DaoFairDrop[8]",
              components: [
                {
                  name: "unitAmount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "unitNumber",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "DukiInActionEvent",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: false,
              internalType: "address",
            },
            {
              name: "interactType",
              type: "uint8",
              indexed: false,
              internalType: "enum ISharedStructs.InteractType",
            },
            {
              name: "daoEvolveRound",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "unitNumber",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "AlreadyInvested",
          inputs: [],
        },
        {
          type: "error",
          name: "BpsSumError",
          inputs: [],
        },
        {
          type: "error",
          name: "BpsTooLargeViolationError",
          inputs: [],
        },
        {
          type: "error",
          name: "BpsTooSmallViolationError",
          inputs: [],
        },
        {
          type: "error",
          name: "ClaimDoNotHaveRole",
          inputs: [
            {
              name: "t",
              type: "uint8",
              internalType: "enum IBaguaDukiDao.Trigram",
            },
          ],
        },
        {
          type: "error",
          name: "ClaimedCurrentRoundAlreadyError",
          inputs: [],
        },
        {
          type: "error",
          name: "DuplicateFounderError",
          inputs: [],
        },
        {
          type: "error",
          name: "InsufficientAllowance",
          inputs: [
            {
              name: "t",
              type: "uint8",
              internalType: "enum ISharedStructs.InteractType",
            },
            {
              name: "src",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InsufficientDistributionAmount",
          inputs: [
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidSignature",
          inputs: [],
        },
        {
          type: "error",
          name: "InvalidTrigramIndexError",
          inputs: [],
        },
        {
          type: "error",
          name: "InvertorsFullExceed369",
          inputs: [],
        },
        {
          type: "error",
          name: "InvestorsFull",
          inputs: [],
        },
        {
          type: "error",
          name: "JoinedAfterCurrentDaoDistribution",
          inputs: [],
        },
        {
          type: "error",
          name: "LateForCurrentClaim",
          inputs: [
            {
              name: "currentClaimRound",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "lateEntryRound",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "LoveAsMoneyIntoDaoRequired",
          inputs: [],
        },
        {
          type: "error",
          name: "NoDistributionUnitLeft",
          inputs: [],
        },
        {
          type: "error",
          name: "NoFoundersError",
          inputs: [],
        },
        {
          type: "error",
          name: "NotCommunityLotteryWinner",
          inputs: [],
        },
        {
          type: "error",
          name: "NotHasRole",
          inputs: [],
        },
        {
          type: "error",
          name: "NotOwnerError",
          inputs: [],
        },
        {
          type: "error",
          name: "NotQualifiedForClaim",
          inputs: [
            {
              name: "t",
              type: "uint8",
              internalType: "enum ISharedStructs.InteractType",
            },
          ],
        },
        {
          type: "error",
          name: "NotSupported",
          inputs: [
            {
              name: "actionNeeded",
              type: "string",
              internalType: "string",
            },
          ],
        },
        {
          type: "error",
          name: "TransferFailed",
          inputs: [
            {
              name: "t",
              type: "uint8",
              internalType: "enum IBaguaDukiDao.CoinFlowType",
            },
            {
              name: "other",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ZeroAddressError",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1740478025.json",
      deploymentScript: "Deploy.s.sol",
    },
    MyERC20Mock: {
      address: "0x4c073a92b1c8fb55313102ab412fb7f1704bcbdd",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialAccount",
              type: "address",
              internalType: "address",
            },
            {
              name: "initialBalance",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "DOMAIN_SEPARATOR",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "approveInternal",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "burn",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "eip712Domain",
          inputs: [],
          outputs: [
            {
              name: "fields",
              type: "bytes1",
              internalType: "bytes1",
            },
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "version",
              type: "string",
              internalType: "string",
            },
            {
              name: "chainId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "verifyingContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "extensions",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nonces",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "permit",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "v",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "r",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferInternal",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "EIP712DomainChanged",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ECDSAInvalidSignature",
          inputs: [],
        },
        {
          type: "error",
          name: "ECDSAInvalidSignatureLength",
          inputs: [
            {
              name: "length",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ECDSAInvalidSignatureS",
          inputs: [
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC2612ExpiredSignature",
          inputs: [
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC2612InvalidSigner",
          inputs: [
            {
              name: "signer",
              type: "address",
              internalType: "address",
            },
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidAccountNonce",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "currentNonce",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidShortString",
          inputs: [],
        },
        {
          type: "error",
          name: "StringTooLong",
          inputs: [
            {
              name: "str",
              type: "string",
              internalType: "string",
            },
          ],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1740478025.json",
      deploymentScript: "Deploy.s.sol",
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
